// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_messages_2eproto;
namespace Filetransfer {
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class FileTransferRequest;
struct FileTransferRequestDefaultTypeInternal;
extern FileTransferRequestDefaultTypeInternal _FileTransferRequest_default_instance_;
class FileTransferResponse;
struct FileTransferResponseDefaultTypeInternal;
extern FileTransferResponseDefaultTypeInternal _FileTransferResponse_default_instance_;
}  // namespace Filetransfer
PROTOBUF_NAMESPACE_OPEN
template <>
::Filetransfer::FileChunk* Arena::CreateMaybeMessage<::Filetransfer::FileChunk>(Arena*);
template <>
::Filetransfer::FileTransferRequest* Arena::CreateMaybeMessage<::Filetransfer::FileTransferRequest>(Arena*);
template <>
::Filetransfer::FileTransferResponse* Arena::CreateMaybeMessage<::Filetransfer::FileTransferResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace Filetransfer {

// ===================================================================


// -------------------------------------------------------------------

class FileTransferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Filetransfer.FileTransferRequest) */ {
 public:
  inline FileTransferRequest() : FileTransferRequest(nullptr) {}
  ~FileTransferRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileTransferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileTransferRequest(const FileTransferRequest& from);
  FileTransferRequest(FileTransferRequest&& from) noexcept
    : FileTransferRequest() {
    *this = ::std::move(from);
  }

  inline FileTransferRequest& operator=(const FileTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTransferRequest& operator=(FileTransferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileTransferRequest* internal_default_instance() {
    return reinterpret_cast<const FileTransferRequest*>(
               &_FileTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileTransferRequest& a, FileTransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTransferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTransferRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileTransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileTransferRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileTransferRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileTransferRequest& from) {
    FileTransferRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTransferRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Filetransfer.FileTransferRequest";
  }
  protected:
  explicit FileTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kMd5HashFieldNumber = 2,
    kFileSizeKbFieldNumber = 3,
  };
  // string file_name = 1;
  void clear_file_name() ;
  const std::string& file_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* ptr);

  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(
      const std::string& value);
  std::string* _internal_mutable_file_name();

  public:
  // string md5_hash = 2;
  void clear_md5_hash() ;
  const std::string& md5_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_md5_hash(Arg_&& arg, Args_... args);
  std::string* mutable_md5_hash();
  PROTOBUF_NODISCARD std::string* release_md5_hash();
  void set_allocated_md5_hash(std::string* ptr);

  private:
  const std::string& _internal_md5_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5_hash(
      const std::string& value);
  std::string* _internal_mutable_md5_hash();

  public:
  // uint64 file_size_kb = 3;
  void clear_file_size_kb() ;
  ::uint64_t file_size_kb() const;
  void set_file_size_kb(::uint64_t value);

  private:
  ::uint64_t _internal_file_size_kb() const;
  void _internal_set_file_size_kb(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:Filetransfer.FileTransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_hash_;
    ::uint64_t file_size_kb_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class FileChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Filetransfer.FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileChunk(const FileChunk& from);
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(FileChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileChunk& from) {
    FileChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Filetransfer.FileChunk";
  }
  protected:
  explicit FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSequenceNumFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 sequence_num = 1;
  void clear_sequence_num() ;
  ::uint32_t sequence_num() const;
  void set_sequence_num(::uint32_t value);

  private:
  ::uint32_t _internal_sequence_num() const;
  void _internal_set_sequence_num(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Filetransfer.FileChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::uint32_t sequence_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};// -------------------------------------------------------------------

class FileTransferResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Filetransfer.FileTransferResponse) */ {
 public:
  inline FileTransferResponse() : FileTransferResponse(nullptr) {}
  ~FileTransferResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileTransferResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileTransferResponse(const FileTransferResponse& from);
  FileTransferResponse(FileTransferResponse&& from) noexcept
    : FileTransferResponse() {
    *this = ::std::move(from);
  }

  inline FileTransferResponse& operator=(const FileTransferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTransferResponse& operator=(FileTransferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileTransferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileTransferResponse* internal_default_instance() {
    return reinterpret_cast<const FileTransferResponse*>(
               &_FileTransferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileTransferResponse& a, FileTransferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTransferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileTransferResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileTransferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileTransferResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileTransferResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileTransferResponse& from) {
    FileTransferResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTransferResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Filetransfer.FileTransferResponse";
  }
  protected:
  explicit FileTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kReturnCodeFieldNumber = 1,
  };
  // string error_message = 2;
  void clear_error_message() ;
  const std::string& error_message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* ptr);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // int32 return_code = 1;
  void clear_return_code() ;
  ::int32_t return_code() const;
  void set_return_code(::int32_t value);

  private:
  ::int32_t _internal_return_code() const;
  void _internal_set_return_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Filetransfer.FileTransferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::int32_t return_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileTransferRequest

// string file_name = 1;
inline void FileTransferRequest::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& FileTransferRequest::file_name() const {
  // @@protoc_insertion_point(field_get:Filetransfer.FileTransferRequest.file_name)
  return _internal_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileTransferRequest::set_file_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Filetransfer.FileTransferRequest.file_name)
}
inline std::string* FileTransferRequest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:Filetransfer.FileTransferRequest.file_name)
  return _s;
}
inline const std::string& FileTransferRequest::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void FileTransferRequest::_internal_set_file_name(const std::string& value) {
  ;


  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileTransferRequest::_internal_mutable_file_name() {
  ;
  return _impl_.file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* FileTransferRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:Filetransfer.FileTransferRequest.file_name)
  return _impl_.file_name_.Release();
}
inline void FileTransferRequest::set_allocated_file_name(std::string* value) {
  _impl_.file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_name_.IsDefault()) {
          _impl_.file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Filetransfer.FileTransferRequest.file_name)
}

// string md5_hash = 2;
inline void FileTransferRequest::clear_md5_hash() {
  _impl_.md5_hash_.ClearToEmpty();
}
inline const std::string& FileTransferRequest::md5_hash() const {
  // @@protoc_insertion_point(field_get:Filetransfer.FileTransferRequest.md5_hash)
  return _internal_md5_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileTransferRequest::set_md5_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.md5_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Filetransfer.FileTransferRequest.md5_hash)
}
inline std::string* FileTransferRequest::mutable_md5_hash() {
  std::string* _s = _internal_mutable_md5_hash();
  // @@protoc_insertion_point(field_mutable:Filetransfer.FileTransferRequest.md5_hash)
  return _s;
}
inline const std::string& FileTransferRequest::_internal_md5_hash() const {
  return _impl_.md5_hash_.Get();
}
inline void FileTransferRequest::_internal_set_md5_hash(const std::string& value) {
  ;


  _impl_.md5_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* FileTransferRequest::_internal_mutable_md5_hash() {
  ;
  return _impl_.md5_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* FileTransferRequest::release_md5_hash() {
  // @@protoc_insertion_point(field_release:Filetransfer.FileTransferRequest.md5_hash)
  return _impl_.md5_hash_.Release();
}
inline void FileTransferRequest::set_allocated_md5_hash(std::string* value) {
  _impl_.md5_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.md5_hash_.IsDefault()) {
          _impl_.md5_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Filetransfer.FileTransferRequest.md5_hash)
}

// uint64 file_size_kb = 3;
inline void FileTransferRequest::clear_file_size_kb() {
  _impl_.file_size_kb_ = ::uint64_t{0u};
}
inline ::uint64_t FileTransferRequest::file_size_kb() const {
  // @@protoc_insertion_point(field_get:Filetransfer.FileTransferRequest.file_size_kb)
  return _internal_file_size_kb();
}
inline void FileTransferRequest::set_file_size_kb(::uint64_t value) {
  _internal_set_file_size_kb(value);
  // @@protoc_insertion_point(field_set:Filetransfer.FileTransferRequest.file_size_kb)
}
inline ::uint64_t FileTransferRequest::_internal_file_size_kb() const {
  return _impl_.file_size_kb_;
}
inline void FileTransferRequest::_internal_set_file_size_kb(::uint64_t value) {
  ;
  _impl_.file_size_kb_ = value;
}

// -------------------------------------------------------------------

// FileChunk

// uint32 sequence_num = 1;
inline void FileChunk::clear_sequence_num() {
  _impl_.sequence_num_ = 0u;
}
inline ::uint32_t FileChunk::sequence_num() const {
  // @@protoc_insertion_point(field_get:Filetransfer.FileChunk.sequence_num)
  return _internal_sequence_num();
}
inline void FileChunk::set_sequence_num(::uint32_t value) {
  _internal_set_sequence_num(value);
  // @@protoc_insertion_point(field_set:Filetransfer.FileChunk.sequence_num)
}
inline ::uint32_t FileChunk::_internal_sequence_num() const {
  return _impl_.sequence_num_;
}
inline void FileChunk::_internal_set_sequence_num(::uint32_t value) {
  ;
  _impl_.sequence_num_ = value;
}

// bytes data = 2;
inline void FileChunk::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FileChunk::data() const {
  // @@protoc_insertion_point(field_get:Filetransfer.FileChunk.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileChunk::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Filetransfer.FileChunk.data)
}
inline std::string* FileChunk::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Filetransfer.FileChunk.data)
  return _s;
}
inline const std::string& FileChunk::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FileChunk::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* FileChunk::release_data() {
  // @@protoc_insertion_point(field_release:Filetransfer.FileChunk.data)
  return _impl_.data_.Release();
}
inline void FileChunk::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Filetransfer.FileChunk.data)
}

// -------------------------------------------------------------------

// FileTransferResponse

// int32 return_code = 1;
inline void FileTransferResponse::clear_return_code() {
  _impl_.return_code_ = 0;
}
inline ::int32_t FileTransferResponse::return_code() const {
  // @@protoc_insertion_point(field_get:Filetransfer.FileTransferResponse.return_code)
  return _internal_return_code();
}
inline void FileTransferResponse::set_return_code(::int32_t value) {
  _internal_set_return_code(value);
  // @@protoc_insertion_point(field_set:Filetransfer.FileTransferResponse.return_code)
}
inline ::int32_t FileTransferResponse::_internal_return_code() const {
  return _impl_.return_code_;
}
inline void FileTransferResponse::_internal_set_return_code(::int32_t value) {
  ;
  _impl_.return_code_ = value;
}

// string error_message = 2;
inline void FileTransferResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& FileTransferResponse::error_message() const {
  // @@protoc_insertion_point(field_get:Filetransfer.FileTransferResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileTransferResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Filetransfer.FileTransferResponse.error_message)
}
inline std::string* FileTransferResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:Filetransfer.FileTransferResponse.error_message)
  return _s;
}
inline const std::string& FileTransferResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void FileTransferResponse::_internal_set_error_message(const std::string& value) {
  ;


  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* FileTransferResponse::_internal_mutable_error_message() {
  ;
  return _impl_.error_message_.Mutable( GetArenaForAllocation());
}
inline std::string* FileTransferResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:Filetransfer.FileTransferResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void FileTransferResponse::set_allocated_error_message(std::string* value) {
  _impl_.error_message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Filetransfer.FileTransferResponse.error_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Filetransfer


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_messages_2eproto_2epb_2eh
