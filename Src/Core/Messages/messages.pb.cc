// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace Filetransfer {
template <typename>
PROTOBUF_CONSTEXPR FileTransferRequest::FileTransferRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.md5_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.file_size_kb_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferRequestDefaultTypeInternal() {}
  union {
    FileTransferRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferRequestDefaultTypeInternal _FileTransferRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FileChunk::FileChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_num_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileChunkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileChunkDefaultTypeInternal() {}
  union {
    FileChunk _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileChunkDefaultTypeInternal _FileChunk_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FileTransferResponse::FileTransferResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.return_code_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileTransferResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTransferResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTransferResponseDefaultTypeInternal() {}
  union {
    FileTransferResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTransferResponseDefaultTypeInternal _FileTransferResponse_default_instance_;
}  // namespace Filetransfer
static ::_pb::Metadata file_level_metadata_messages_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_messages_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_messages_2eproto = nullptr;
const ::uint32_t TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileTransferRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileTransferRequest, _impl_.file_name_),
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileTransferRequest, _impl_.md5_hash_),
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileTransferRequest, _impl_.file_size_kb_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileChunk, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileChunk, _impl_.sequence_num_),
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileChunk, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileTransferResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileTransferResponse, _impl_.return_code_),
    PROTOBUF_FIELD_OFFSET(::Filetransfer::FileTransferResponse, _impl_.error_message_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::Filetransfer::FileTransferRequest)},
        { 11, -1, -1, sizeof(::Filetransfer::FileChunk)},
        { 21, -1, -1, sizeof(::Filetransfer::FileTransferResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::Filetransfer::_FileTransferRequest_default_instance_._instance,
    &::Filetransfer::_FileChunk_default_instance_._instance,
    &::Filetransfer::_FileTransferResponse_default_instance_._instance,
};
const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016messages.proto\022\014Filetransfer\"P\n\023FileTr"
    "ansferRequest\022\021\n\tfile_name\030\001 \001(\t\022\020\n\010md5_"
    "hash\030\002 \001(\t\022\024\n\014file_size_kb\030\003 \001(\004\"/\n\tFile"
    "Chunk\022\024\n\014sequence_num\030\001 \001(\r\022\014\n\004data\030\002 \001("
    "\014\"B\n\024FileTransferResponse\022\023\n\013return_code"
    "\030\001 \001(\005\022\025\n\rerror_message\030\002 \001(\tb\006proto3"
};
static ::absl::once_flag descriptor_table_messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false,
    false,
    237,
    descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_messages_2eproto::offsets,
    file_level_metadata_messages_2eproto,
    file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_messages_2eproto_getter() {
  return &descriptor_table_messages_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_messages_2eproto(&descriptor_table_messages_2eproto);
namespace Filetransfer {
// ===================================================================

class FileTransferRequest::_Internal {
 public:
};

FileTransferRequest::FileTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Filetransfer.FileTransferRequest)
}
FileTransferRequest::FileTransferRequest(const FileTransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransferRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_) {}

    , decltype(_impl_.md5_hash_) {}

    , decltype(_impl_.file_size_kb_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), _this->GetArenaForAllocation());
  }
  _impl_.md5_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.md5_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5_hash().empty()) {
    _this->_impl_.md5_hash_.Set(from._internal_md5_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.file_size_kb_ = from._impl_.file_size_kb_;
  // @@protoc_insertion_point(copy_constructor:Filetransfer.FileTransferRequest)
}

inline void FileTransferRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.file_name_) {}

    , decltype(_impl_.md5_hash_) {}

    , decltype(_impl_.file_size_kb_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.md5_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.md5_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTransferRequest::~FileTransferRequest() {
  // @@protoc_insertion_point(destructor:Filetransfer.FileTransferRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_name_.Destroy();
  _impl_.md5_hash_.Destroy();
}

void FileTransferRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Filetransfer.FileTransferRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_name_.ClearToEmpty();
  _impl_.md5_hash_.ClearToEmpty();
  _impl_.file_size_kb_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransferRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Filetransfer.FileTransferRequest.file_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string md5_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_md5_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Filetransfer.FileTransferRequest.md5_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 file_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.file_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileTransferRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Filetransfer.FileTransferRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    const std::string& _s = this->_internal_file_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Filetransfer.FileTransferRequest.file_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string md5_hash = 2;
  if (!this->_internal_md5_hash().empty()) {
    const std::string& _s = this->_internal_md5_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Filetransfer.FileTransferRequest.md5_hash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 file_size_kb = 3;
  if (this->_internal_file_size_kb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_file_size_kb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Filetransfer.FileTransferRequest)
  return target;
}

::size_t FileTransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Filetransfer.FileTransferRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_file_name());
  }

  // string md5_hash = 2;
  if (!this->_internal_md5_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_md5_hash());
  }

  // uint64 file_size_kb = 3;
  if (this->_internal_file_size_kb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_file_size_kb());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransferRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransferRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransferRequest::GetClassData() const { return &_class_data_; }


void FileTransferRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransferRequest*>(&to_msg);
  auto& from = static_cast<const FileTransferRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Filetransfer.FileTransferRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_md5_hash().empty()) {
    _this->_internal_set_md5_hash(from._internal_md5_hash());
  }
  if (from._internal_file_size_kb() != 0) {
    _this->_internal_set_file_size_kb(from._internal_file_size_kb());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransferRequest::CopyFrom(const FileTransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Filetransfer.FileTransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferRequest::IsInitialized() const {
  return true;
}

void FileTransferRequest::InternalSwap(FileTransferRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.file_name_, lhs_arena,
                                       &other->_impl_.file_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.md5_hash_, lhs_arena,
                                       &other->_impl_.md5_hash_, rhs_arena);

  swap(_impl_.file_size_kb_, other->_impl_.file_size_kb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransferRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[0]);
}
// ===================================================================

class FileChunk::_Internal {
 public:
};

FileChunk::FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Filetransfer.FileChunk)
}
FileChunk::FileChunk(const FileChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.sequence_num_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_num_ = from._impl_.sequence_num_;
  // @@protoc_insertion_point(copy_constructor:Filetransfer.FileChunk)
}

inline void FileChunk::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.sequence_num_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileChunk::~FileChunk() {
  // @@protoc_insertion_point(destructor:Filetransfer.FileChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileChunk::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void FileChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:Filetransfer.FileChunk)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.sequence_num_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 sequence_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileChunk::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Filetransfer.FileChunk)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence_num = 1;
  if (this->_internal_sequence_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_sequence_num(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Filetransfer.FileChunk)
  return target;
}

::size_t FileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Filetransfer.FileChunk)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // uint32 sequence_num = 1;
  if (this->_internal_sequence_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sequence_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileChunk::GetClassData() const { return &_class_data_; }


void FileChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileChunk*>(&to_msg);
  auto& from = static_cast<const FileChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Filetransfer.FileChunk)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_sequence_num() != 0) {
    _this->_internal_set_sequence_num(from._internal_sequence_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileChunk::CopyFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Filetransfer.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunk::IsInitialized() const {
  return true;
}

void FileChunk::InternalSwap(FileChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);

  swap(_impl_.sequence_num_, other->_impl_.sequence_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[1]);
}
// ===================================================================

class FileTransferResponse::_Internal {
 public:
};

FileTransferResponse::FileTransferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Filetransfer.FileTransferResponse)
}
FileTransferResponse::FileTransferResponse(const FileTransferResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileTransferResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_) {}

    , decltype(_impl_.return_code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.return_code_ = from._impl_.return_code_;
  // @@protoc_insertion_point(copy_constructor:Filetransfer.FileTransferResponse)
}

inline void FileTransferResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_) {}

    , decltype(_impl_.return_code_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileTransferResponse::~FileTransferResponse() {
  // @@protoc_insertion_point(destructor:Filetransfer.FileTransferResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTransferResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void FileTransferResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileTransferResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Filetransfer.FileTransferResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.return_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTransferResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Filetransfer.FileTransferResponse.error_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FileTransferResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Filetransfer.FileTransferResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_return_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Filetransfer.FileTransferResponse.error_message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Filetransfer.FileTransferResponse)
  return target;
}

::size_t FileTransferResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Filetransfer.FileTransferResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // int32 return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_return_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTransferResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileTransferResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTransferResponse::GetClassData() const { return &_class_data_; }


void FileTransferResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileTransferResponse*>(&to_msg);
  auto& from = static_cast<const FileTransferResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Filetransfer.FileTransferResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_return_code() != 0) {
    _this->_internal_set_return_code(from._internal_return_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTransferResponse::CopyFrom(const FileTransferResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Filetransfer.FileTransferResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTransferResponse::IsInitialized() const {
  return true;
}

void FileTransferResponse::InternalSwap(FileTransferResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, lhs_arena,
                                       &other->_impl_.error_message_, rhs_arena);

  swap(_impl_.return_code_, other->_impl_.return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTransferResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_messages_2eproto_getter, &descriptor_table_messages_2eproto_once,
      file_level_metadata_messages_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace Filetransfer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Filetransfer::FileTransferRequest*
Arena::CreateMaybeMessage< ::Filetransfer::FileTransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Filetransfer::FileTransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Filetransfer::FileChunk*
Arena::CreateMaybeMessage< ::Filetransfer::FileChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Filetransfer::FileChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::Filetransfer::FileTransferResponse*
Arena::CreateMaybeMessage< ::Filetransfer::FileTransferResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Filetransfer::FileTransferResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
